"LASSO 1SE", "LASSO MIN", "Knockoff", "SCAD"))
Ndf
}
cleanPrecision = function(x){
z0.75 = lapply(x[1,], prep)
z0.60 =  lapply(x[2,], prep)
z0.90=  lapply(x[3,], prep)
ats = lapply(x[4,],prep)
eats = lapply(x[5,], prep)
lasso_1se = lapply(x[6,], prep)
lasso_min = lapply(x[7,], prep)
ko = lapply(x[8,],prep)
scad = lapply(x[9,],prep)
P = data.frame("Precision" = c(extractPrecision(z0.75),
extractPrecision(z0.60),
extractPrecision(z0.90),
extractPrecision(ats),
extractPrecision(eats),
extractPrecision(lasso_1se),
extractPrecision(lasso_min),
extractPrecision(ko),
extractPrecision(scad)),
"Method" = c(rep("Static 0.75", repeats),
rep("Static 0.60", repeats),
rep("Static 0.90", repeats),
rep("ATS", repeats),
rep("Exclusion ATS", repeats),
rep("LASSO 1SE", repeats),
rep("LASSO MIN", repeats),
rep("Knockoff", repeats),
rep("SCAD", repeats)))
P$Method = factor(P$Method, levels = c("ATS", "Exclusion ATS",
"Static 0.60", "Static 0.75", "Static 0.90",
"LASSO 1SE", "LASSO MIN", "Knockoff", "SCAD"))
P
}
cleanRecall = function(x){
z0.75 = lapply(x[1,], prep)
z0.60 =  lapply(x[2,], prep)
z0.90=  lapply(x[3,], prep)
ats = lapply(x[4,],prep)
eats = lapply(x[5,], prep)
lasso_1se = lapply(x[6,], prep)
lasso_min = lapply(x[7,], prep)
ko = lapply(x[8,],prep)
scad = lapply(x[9,],prep)
R = data.frame("Recall" = c(extractRecall(z0.75),
extractRecall(z0.60),
extractRecall(z0.90),
extractRecall(ats),
extractRecall(eats),
extractRecall(lasso_1se),
extractRecall(lasso_min),
extractRecall(ko),
extractRecall(scad)),
"Method" = c(rep("Static 0.75", repeats),
rep("Static 0.60", repeats),
rep("Static 0.90", repeats),
rep("ATS", repeats),
rep("Exclusion ATS", repeats),
rep("LASSO 1SE", repeats),
rep("LASSO MIN", repeats),
rep("Knockoff", repeats),
rep("SCAD", repeats)))
R$Method = factor(R$Method, levels = c("ATS", "Exclusion ATS",
"Static 0.60", "Static 0.75", "Static 0.90",
"LASSO 1SE", "LASSO MIN", "Knockoff", "SCAD"))
R
}
extractPrecision = function(ql){
fp = sapply(ql, "[[", 2)
tp = sapply(ql, "[[", 1)
fn = sapply(ql, "[[", 4)
tn = sapply(ql, "[[", 3)
ans = c()
for (i in 1:length(tn)){
if ((tp[i] == 0 & fp[i] > 0) | (tp[i] == 0 & fn[i] > 0)){
ans[i] = 0
}else{
ans[i] = tp[i]/(tp[i] + fp[i])
}
}
ans
}
extractRecall = function(ql){
fp = sapply(ql, "[[", 2)
tp = sapply(ql, "[[", 1)
fn = sapply(ql, "[[", 4)
tn = sapply(ql, "[[", 3)
tp/(tp + fn)
}
extractN = function(ql){
tp = sapply(ql, "[[", 1)
fp = sapply(ql, "[[", 2)
tp + fp
}
### ATS Function ###
Rcpp::cppFunction('
int getR(const NumericVector& d) {
int p = d.size();
NumericVector lq(p, 0.0);
NumericVector sigma2(p);
for (int q = 0; q < p; q++) {
NumericVector d1 = head(d, q + 1);
NumericVector d2 = tail(d, p - (q + 1));
double mu1 = mean(d1);
double mu2 = mean(d2);
sigma2[q] = (sum(pow(d1 - mu1, 2)) + sum(pow(d2 - mu2, 2))) / (p - 2);
lq[q] = sum(dnorm(d1, mu1, sqrt(sigma2[q]), true)) +
sum(dnorm(d2, mu2, sqrt(sigma2[q]), true));
}
return which_max(lq) + 1;
}
')
### Generating Data ###
extend <- function(alphabet) function(i) {
base10toA <- function(n, A) {
stopifnot(n >= 0L)
N <- length(A)
j <- n %/% N
if (j == 0L) A[n + 1L] else paste0(Recall(j - 1L, A), A[n %% N + 1L])
}
vapply(i-1L, base10toA, character(1L), alphabet)
}
gendata = function(n, p, active){
# Add letters as variable names
MORELETTERS <- extend(LETTERS)
moreletters = MORELETTERS(c(1:p))
# Generate random data from multivariate gaussian with Toeplitz covariance matrix
toeshd = 0.5^abs(row(matrix(1:p, p, p)) - col(matrix(1:p, p, p)))
x = mvtnorm::rmvnorm(n  = n, sigma = toeshd)
# Randomly generate beta coefficient
beta = rep(0,p)
signs = sample(c(-1,1), active, replace = T)
coefs = sample(1:3, active, replace = T)
coefsigns = signs * coefs
beta[1:active] = sample(coefsigns, active, replace = T)
colnames(x) = moreletters
names(beta) = moreletters[1:length(beta)]
y <- x %*% beta
list("Y" = y, "X" = x, "beta" = beta)
}
### Plotting ###
makeCluster = function(c){
c$cluster = case_when(c$Method == "All" ~ "All",
c$Method %in% c("Quarter", "Quarter Excl 0.2", "Quarter Excl 0.1",
"Quarter Adaptive Excl 95%", "Quarter Adaptive Excl 99%",
"Quarter Shuffle 95%") ~ "Quarter",
c$Method %in% c("Static 0.60", "Static 0.75", "Static 0.90") ~ "Static",
c$Method %in% c("LASSO 1SE", "LASSO MIN") ~ "LASSO",
.default = as.character(c$Method))
c
}
theme_few_grid = function (base_size = 12, base_family = "")
{
gray <- "#4D4D4D"
black <- "#000000"
theme_bw(base_size = base_size, base_family = base_family) +
theme(line = element_line(colour = gray), rect = element_rect(fill = "white",
colour = NA), text = element_text(colour = black),
axis.ticks = element_line(colour = gray), legend.key = element_rect(colour = NA),
panel.border = element_rect(colour = gray), panel.grid = element_line(color = alpha("black", 0.05)),
strip.background = element_rect(fill = "#f7f9fc", colour = gray))
}
totplotnoaxis = function(TOT){
ggplot(TOT,aes(x = Method, y = MCC, fill = Method)) + geom_boxplot(alpha = 0.65) +
facet_grid(Dimension ~SNR, labeller = label_parsed) +
theme_few_grid(base_size = 20) +
stat_summary(fun ="mean", shape = 5, size = 0.5) +
stat_summary(fun= "mean", geom="line", linetype ="solid", linewidth = 0.5,  aes(group= cluster, alpha = 2)) +
theme(legend.position = "none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x= element_blank()) +
xlab(element_blank()) +
scale_fill_manual(values = c("#FC8D62", "#FFD92F","#A6D854","#A6D854","#A6D854","#8DA0CB","#8DA0CB","#8DA0CB"))
}
totplot = function(TOT){
ggplot(TOT,aes(x = Method, y = MCC, fill = Method)) + geom_boxplot(alpha = 0.65) +
facet_grid(Dimension ~SNR, labeller = label_parsed) +
theme_few_grid(base_size = 20) +
stat_summary(fun ="mean", shape = 5, size = 0.5) +
stat_summary(fun= "mean", geom="line", linetype ="solid", linewidth = 0.5,  aes(group= cluster, alpha = 2)) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
strip.text.x = element_blank()) +
xlab(element_blank()) +
scale_fill_manual(values = c("#FC8D62", "#FFD92F","#A6D854","#A6D854","#A6D854","#8DA0CB","#8DA0CB","#8DA0CB"))
}
combine = function(a,b,c,d = NULL, ref, filtered = NULL){
if (is.null(filtered) == T){
filtered = c("All", "Quarter Adaptive 95%",
"Quarter Adaptive 99%", "Quarter Shuffle 95%", "Shuffle 95%",
"Shuffle Weighted", "Static 0.60","Static 0.75", "Static 0.90", "LASSO 1SE", "LASSO MIN")
}
dimension = c("n = 20, p = 1000, active = 2",
"n = 100, p = 500, active = 10",
"n = 200, p = 200, active = 20",
"n = 500, p = 100, active = 20")
labels  = c("(I):~n==20*`,`~p==1000*`,`~`|`*beta[S]*`|`==2",
"(II):~n==100*`,`~p==500*`,`~`|`*beta[S]*`|`==10",
"(III):~n==200*`,`~p==200*`,`~`|`*beta[S]*`|`==20",
"(IV):~n==500*`,`~p==100*`,`~`|`*beta[S]*`|`==20")
SNR = c(0.5,1,2, 3)
SNRlabels = c("~SNR==0.5", "~SNR==1", "~SNR==2", "~SNR==3")
r = rbind(a |> cleanMCC() |> dplyr::filter(Method %in% filtered) |> mutate(SNR = SNR[1], N = "A"),
b |> cleanMCC() |> dplyr::filter(Method %in% filtered) |> mutate(SNR = SNR[2], N = "B"),
c |> cleanMCC() |> dplyr::filter(Method %in% filtered) |> mutate(SNR = SNR[3], N = "C"),
d |> cleanMCC() |> dplyr::filter(Method %in% filtered) |> mutate(SNR = SNR[4], N = "C"))
r$Method = as.character(r$Method)
r$Method[r$Method == "LASSO 1SE"] = "LASSO"
r$Method[r$Method == "Exclusion ATS"] = "EATS"
r$Method[r$Method == "All"] = "ATS"
r$Method = factor(r$Method, levels = c("ATS", "EATS", "Static 0.60", "Static 0.75", "Static 0.90", "LASSO","Knockoff","SCAD"))
r = data.frame(r) |> mutate(Dimension = dimension[ref]) |>
mutate(Dimension = factor(Dimension, labels = labels[ref]),
SNR = factor(SNR, levels = c("0.5", "1", "2", "3"),
labels = c(SNRlabels[1],
SNRlabels[2],
SNRlabels[3],
SNRlabels[4])))
return(r)
}
combineN = function(a,b,c = NULL,d, ref,filtered = NULL){
if (is.null(filtered) == T){
filtered = c("ATS", "Exclusion ATS", "Static 0.60","Static 0.75", "Static 0.90", "LASSO 1SE", "LASSO MIN")
}
dimension = c("n = 20, p = 1000, active = 2",
"n = 100, p = 500, active = 10",
"n = 200, p = 200, active = 20",
"n = 500, p = 100, active = 20")
labels  = c("(I):~n==20*`,`~p==1000*`,`~`|`*beta[S]*`|`==2",
"(II):~n==100*`,`~p==500*`,`~`|`*beta[S]*`|`==10",
"(III):~n==200*`,`~p==200*`,`~`|`*beta[S]*`|`==20",
"(IV):~n==500*`,`~p==100*`,`~`|`*beta[S]*`|`==20")
SNR = c(0.5,1,2, 3)
SNRlabels = c("~SNR==0.5", "~SNR==1", "~SNR==2", "~SNR==3")
r = rbind(a |> cleanN() |> dplyr::filter(Method %in% filtered) |> mutate(SNR = SNR[1], N = "A"),
b |> cleanN() |> dplyr::filter(Method %in% filtered) |> mutate(SNR = SNR[2], N = "B"),
c |> cleanN() |> dplyr::filter(Method %in% filtered) |> mutate(SNR = SNR[3], N = "C"),
d |> cleanN() |> dplyr::filter(Method %in% filtered) |> mutate(SNR = SNR[4], N = "C"))
r$Method = as.character(r$Method)
r$Method[r$Method == "LASSO 1SE"] = "LASSO"
r$Method[r$Method == "Exclusion ATS"] = "EATS"
r$Method[r$Method == "All"] = "ATS"
r$Method = factor(r$Method, levels = c("ATS", "EATS", "Static 0.60", "Static 0.75", "Static 0.90", "LASSO","Knockoff","SCAD"))
r = data.frame(r) |> mutate(Dimension = dimension[ref]) |>
mutate(Dimension = factor(Dimension, labels = labels[ref]),
SNR = factor(SNR, levels = c("0.5", "1", "2", "3"),
labels = c(SNRlabels[1],
SNRlabels[2],
SNRlabels[3],
SNRlabels[4])))
return(r)
}
totplotN = function(TOT, lim = max(TOT$NN)){
str = unique(TOT$Dimension) |> as.character() |> strsplit(split = "|")
active = numeric(length(str))
for (i in 1:length(str)){
if (str[[i]] |> last() == 0){
active[i] = paste(str[[i]] |> nth(-2), str[[i]] |> last(), sep = "") |> as.numeric()
}else{
active[i] = as.numeric(str[[i]] |> last())
}
}
TOTdummy = TOT |> group_by(Dimension) |> summarise(active = mean(NN))
TOTdummy$active = active
ggplot(TOT,aes(x = Method, y = NN, fill = Method)) + geom_boxplot(alpha = 0.65) +
facet_grid(Dimension ~SNR, labeller = label_parsed) +
ylab("Variables Selected") +
geom_hline(data = TOTdummy, aes(yintercept = active), linetype = "dashed", linewidth = 0.5) +
coord_cartesian(ylim = c(0, lim)) +
theme_few_grid(base_size = 20) +
xlab(element_blank()) +
stat_summary(fun ="mean", shape = 5, size = 0.5) +
stat_summary(fun= "mean", geom="line", linetype ="solid", linewidth = 0.5,  aes(group= cluster, alpha = 2)) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
strip.text.x = element_blank()) +
scale_fill_manual(values = c("#FC8D62", "#FFD92F","#A6D854","#A6D854","#A6D854","#8DA0CB","#8DA0CB","#8DA0CB"))
}
totplotNnoaxis = function(TOT, lim = max(TOT$NN)){
str = unique(TOT$Dimension) |> as.character() |> strsplit(split = "|")
active = numeric(length(str))
for (i in 1:length(str)){
if (str[[i]] |> last() == 0){
active[i] = paste(str[[i]] |> nth(-2), str[[i]] |> last(), sep = "") |> as.numeric()
}else{
active[i] = as.numeric(str[[i]] |> last())
}
}
TOTdummy = TOT |> group_by(Dimension) |> summarise(active = mean(NN))
TOTdummy$active = active
ggplot(TOT,aes(x = Method, y = NN, fill = Method)) + geom_boxplot(alpha = 0.65) +
facet_grid(Dimension ~SNR, labeller = label_parsed) +
ylab("Variables Selected") +
geom_hline(data = TOTdummy, aes(yintercept = active), linetype = "dashed", linewidth = 0.5) +
coord_cartesian(ylim = c(0, lim)) +
theme_few_grid(base_size = 20) +
stat_summary(fun ="mean", shape = 5, size = 0.5) +
stat_summary(fun= "mean", geom="line", linetype ="solid", linewidth = 0.5,  aes(group= cluster, alpha = 2)) +
theme(legend.position = "none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x= element_blank()) +
scale_fill_manual(values = c("#FC8D62", "#FFD92F","#A6D854","#A6D854","#A6D854","#8DA0CB","#8DA0CB","#8DA0CB"))
}
combineRecall = function(a,b,c = NULL,d, ref,filtered = NULL, ribo = F){
if (is.null(filtered) == T){
filtered = c("All", "Quarter Adaptive 95%",
"Quarter Adaptive 99%", "Quarter Shuffle 95%", "Shuffle 95%",
"Shuffle Weighted", "Static 0.60","Static 0.75", "Static 0.90", "LASSO 1SE", "LASSO MIN")
}
dimension = c("n = 20, p = 1000, active = 2",
"n = 100, p = 500, active = 10",
"n = 200, p = 200, active = 20",
"n = 500, p = 100, active = 20")
labels  = c("(I):~n==20*`,`~p==1000*`,`~`|`*beta[S]*`|`==2",
"(II):~n==100*`,`~p==500*`,`~`|`*beta[S]*`|`==10",
"(III):~n==200*`,`~p==200*`,`~`|`*beta[S]*`|`==20",
"(IV):~n==500*`,`~p==100*`,`~`|`*beta[S]*`|`==20")
SNR = c(0.5,1,2,3)
SNRlabels = c("~SNR==0.5", "~SNR==1", "~SNR==2", "~SNR==3")
r = rbind(a |> cleanRecall() |> dplyr::filter(Method %in% filtered) |> mutate(SNR = SNR[1], N = "A"),
b |> cleanRecall() |> dplyr::filter(Method %in% filtered) |> mutate(SNR = SNR[2], N = "B"),
c |> cleanRecall() |> dplyr::filter(Method %in% filtered) |> mutate(SNR = SNR[3], N = "C"),
d |> cleanRecall() |> dplyr::filter(Method %in% filtered) |> mutate(SNR = SNR[4], N = "C"))
r$Method = as.character(r$Method)
r$Method[r$Method == "LASSO 1SE"] = "LASSO"
r$Method[r$Method == "Exclusion ATS"] = "EATS"
r$Method[r$Method == "All"] = "ATS"
r$Method = factor(r$Method, levels = c("ATS", "EATS", "Static 0.60", "Static 0.75", "Static 0.90", "LASSO","Knockoff","SCAD"))
r = data.frame(r) |> mutate(Dimension = dimension[ref]) |>
mutate(Dimension = factor(Dimension, labels = labels[ref]),
SNR = factor(SNR, levels = c("0.5", "1", "2", "3"),
labels = c(SNRlabels[1],
SNRlabels[2],
SNRlabels[3],
SNRlabels[4])))
return(r)
}
totplotRecall = function(TOT){
ggplot(TOT,aes(x = Method, y = Recall, fill = Method)) + geom_boxplot() +
facet_grid(Dimension ~SNR, labeller = label_parsed, scales = "free_y") +
ylab("Recall") +
theme_few_grid(base_size = 20) +
stat_summary(fun ="mean", shape = 5, size = 0.5) +
stat_summary(fun= "mean", geom="line", linetype ="solid", linewidth = 0.5,  aes(group= cluster, alpha = 2)) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
strip.text.x = element_blank()) +
scale_fill_manual(values = c("#FC8D62", "#FFD92F","#A6D854","#A6D854","#A6D854","#8DA0CB","#8DA0CB","#8DA0CB"))
}
combinePrecision = function(a,b,c = NULL,d, ref,filtered = NULL, ribo = F){
if (is.null(filtered) == T){
filtered = c("All", "Quarter Adaptive 95%",
"Quarter Adaptive 99%", "Quarter Shuffle 95%", "Shuffle 95%",
"Shuffle Weighted", "Static 0.60","Static 0.75", "Static 0.90", "LASSO 1SE", "LASSO MIN")
}
dimension = c("n = 20, p = 1000, active = 2",
"n = 100, p = 500, active = 10",
"n = 200, p = 200, active = 20",
"n = 500, p = 100, active = 20")
labels  = c("(I):~n==20*`,`~p==1000*`,`~`|`*beta[S]*`|`==2",
"(II):~n==100*`,`~p==500*`,`~`|`*beta[S]*`|`==10",
"(III):~n==200*`,`~p==200*`,`~`|`*beta[S]*`|`==20",
"(IV):~n==500*`,`~p==100*`,`~`|`*beta[S]*`|`==20")
SNR = c(0.5,1,2, 3)
SNRlabels = c("~SNR==0.5", "~SNR==1", "~SNR==2", "~SNR==3")
r = rbind(a |> cleanPrecision() |> dplyr::filter(Method %in% filtered) |> mutate(SNR = SNR[1], N = "A"),
b |> cleanPrecision() |> dplyr::filter(Method %in% filtered) |> mutate(SNR = SNR[2], N = "B"),
c |> cleanPrecision() |> dplyr::filter(Method %in% filtered) |> mutate(SNR = SNR[3], N = "C"),
d |> cleanPrecision() |> dplyr::filter(Method %in% filtered) |> mutate(SNR = SNR[4], N = "C"))
r$Method = as.character(r$Method)
r$Method[r$Method == "LASSO 1SE"] = "LASSO"
r$Method[r$Method == "Exclusion ATS"] = "EATS"
r$Method[r$Method == "All"] = "ATS"
r$Method = factor(r$Method, levels = c("ATS", "EATS", "Static 0.60", "Static 0.75", "Static 0.90", "LASSO","Knockoff","SCAD"))
r = data.frame(r) |> mutate(Dimension = dimension[ref]) |>
mutate(Dimension = factor(Dimension, labels = labels[ref]),
SNR = factor(SNR, levels = c("0.5", "1", "2", "3"),
labels = c(SNRlabels[1],
SNRlabels[2],
SNRlabels[3],
SNRlabels[4])))
return(r)
}
totplotPrecision = function(TOT){
ggplot(TOT,aes(x = Method, y = Precision, fill = Method)) + geom_boxplot() +
facet_wrap(Dimension ~SNR, labeller = label_parsed, ncol = 4) +
ylab("Recall") +
theme_few_grid(base_size = 20) +
stat_summary(fun ="mean", shape = 5, size = 0.5) +
stat_summary(fun= "mean", geom="line", linetype ="solid", linewidth = 0.5,  aes(group= cluster, alpha = 2)) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_fill_manual(values = c("#FC8D62", "#FFD92F","#A6D854","#A6D854","#A6D854","#8DA0CB","#8DA0CB","#8DA0CB"))
}
prplot1 = function(recall, precision, recall1, precision1){
r = ggplot(recall, aes(x = Method, y = Recall, fill = Method)) +
geom_boxplot() + facet_grid(Dimension~SNR, labeller = label_parsed) +
ylab("Recall") + theme_few_grid(base_size = 20) +
stat_summary(fun ="mean", shape = 5, size = 0.5) +
stat_summary(fun= "mean", geom="line", linetype ="solid", linewidth = 0.5,  aes(group= cluster, alpha = 2)) +
theme(legend.position = "none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x= element_blank()) +
scale_fill_manual(values = c("#FC8D62", "#FFD92F","#A6D854","#A6D854","#A6D854","#8DA0CB","#8DA0CB","#8DA0CB"))
p = ggplot(precision, aes(x = Method, y = Precision, fill = Method)) +
geom_boxplot() + facet_grid(Dimension~SNR, labeller = label_parsed) +
ylab("Precision") + theme_few_grid(base_size = 20) +
xlab(element_blank()) +
stat_summary(fun ="mean", shape = 5, size = 0.5) +
stat_summary(fun= "mean", geom="line", linetype ="solid", linewidth = 0.5,  aes(group= cluster, alpha = 2)) +
theme(legend.position = "none",
axis.text.x = element_blank(),
strip.text.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_fill_manual(values = c("#FC8D62", "#FFD92F","#A6D854","#A6D854","#A6D854","#8DA0CB","#8DA0CB","#8DA0CB"))
rr = ggplot(recall1, aes(x = Method, y = Recall, fill = Method)) +
geom_boxplot() + facet_grid(Dimension~SNR, labeller = label_parsed) +
ylab("Recall") + theme_few_grid(base_size = 20) +
stat_summary(fun ="mean", shape = 5, size = 0.5) +
stat_summary(fun= "mean", geom="line", linetype ="solid", linewidth = 0.5,  aes(group= cluster, alpha = 2)) +
theme(legend.position = "none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x= element_blank(),
strip.text.x = element_blank()) +
scale_fill_manual(values = c("#FC8D62", "#FFD92F","#A6D854","#A6D854","#A6D854","#8DA0CB","#8DA0CB","#8DA0CB"))
pp = ggplot(precision1, aes(x = Method, y = Precision, fill = Method)) +
geom_boxplot() + facet_grid(Dimension~SNR, labeller = label_parsed) +
ylab("Precision") + theme_few_grid(base_size = 20) +
stat_summary(fun ="mean", shape = 5, size = 0.5) +
stat_summary(fun= "mean", geom="line", linetype ="solid", linewidth = 0.5,  aes(group= cluster, alpha = 2)) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
strip.text.x = element_blank()) +
scale_fill_manual(values = c("#FC8D62", "#FFD92F","#A6D854","#A6D854","#A6D854","#8DA0CB","#8DA0CB","#8DA0CB"))
library(patchwork)
r/p/rr/pp
}
### FDR Function ###
fdr = function(X, p, beta, snr, EV, LOOPS = 1000){
n.selected = false.selections = correct.selections.prop = method = pi = c()
for (i in 1:LOOPS){
signal = sqrt(mean((as.matrix(X) %*% as.matrix(beta))^2))
sigma = as.numeric(signal/sqrt(snr))
# Compute Y with SNR
Y = as.matrix(X)%*%as.matrix(beta) + rnorm(nrow(X), 0, sd = sigma)
# Stability Selection
s = stabs::stabsel(x = X, y = Y, B = 100,
fitfun = stabs::lars.lasso, PFER = 5, cutoff = 0.75,
sampling.type = "MB")
# Shuffle data
idx = sample(1:nrow(X), replace = F)
rX = X[idx,]
idxPushed = c(tail(idx, 1), head(idx, -1))
rY = Y[idxPushed] |> as.matrix(ncol = 1)
# Exclusion Probability Threshold
sMix = stabs::stabsel(x = rX, y = rY, B = 100,
fitfun = stabs::lars.lasso, PFER = 5, cutoff = 0.75,
sampling.type = "MB")
sMix_prob = sort(sMix$max, decreasing = T)
mix_exclusion = quantile(sMix_prob, 0.95)
EATS =  convert(s)[1:(length(convert(s)))][convert(s)[1:(length(convert(s)))] >= 100*mix_exclusion]
if (length(EATS) == 2){EATS = c(EATS, EATS[1])}
EATSix = EATS |> getR()
pi.hat = EATS[EATSix]/100
if (pi.hat <= 0.5){
s = stabs::stabsel(x = X, y = Y, B = 100,
fitfun = stabs::lars.lasso, PFER = EV, cutoff = 0.501,
sampling.type = "MB")
}else{
s = stabs::stabsel(x = X, y = Y, B = 100,
fitfun = stabs::lars.lasso, PFER = EV, cutoff = pi.hat,
sampling.type = "MB")
}
n.selected[i] = length(s$selected)
false.selections[i] = sum(!(s$selected %in% 1:active))
correct.selections.prop[i] = sum((s$selected %in% 1:active))/active
pi[i] = pi.hat
method[i] = ifelse(pi.hat < 0.5, "CPSS", "SS")
if (i %% 10 == 0){print(i)}
}
out = data.frame(n.selected,false.selections, correct.selections.prop, method, pi, EV, snr)
}
load("Data/S1.Rdata")
load("Data/S2.Rdata")
load("Data/S3.Rdata")
load("Data/S4.Rdata")
S1pi = rbind(extractPi(S1.05hard, 0.5, 1),
extractPi(S1.1hard, 1, 1),
extractPi(S1.2hard, 2, 1),
extractPi(S1.3hard, 3, 1))
S2pi = rbind(extractPi(S2.05hard, 0.5, 2),
extractPi(S2.1hard, 1, 2),
extractPi(S2.2hard, 2, 2),
extractPi(S2.3hard, 3, 2))
S3pi = rbind(extractPi(S3.05hard, 0.5, 3),
extractPi(S3.1hard, 1, 3),
extractPi(S3.2hard, 2, 3),
extractPi(S3.3hard, 3, 3))
S4pi = rbind(extractPi(S4.05hard, 0.5, 4),
extractPi(S4.1hard, 1, 4),
extractPi(S4.2hard, 2, 4),
extractPi(S4.3hard, 3, 4))
Spi = rbind(S1pi, S2pi, S3pi, S4pi)
ggplot(Spi, aes(x = value, fill = variable)) + geom_density(alpha = 0.7) +
facet_grid(dimension~SNR, labeller = label_parsed) + xlab(TeX("Estimated $\\pi$")) + ylab("Frequency") +
theme_few_grid(base_size = 20) + scale_fill_manual(values = c("#FC8D62", "#FFD92F")) + labs(fill = "Method")
